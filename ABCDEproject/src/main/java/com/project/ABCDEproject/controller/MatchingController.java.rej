diff a/ABCDEproject/src/main/java/com/project/ABCDEproject/controller/MatchingController.java b/ABCDEproject/src/main/java/com/project/ABCDEproject/controller/MatchingController.java	(rejected hunks)
@@ -1,107 +1,109 @@
 package com.project.ABCDEproject.controller;
 
 import java.util.ArrayList;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.core.annotation.AuthenticationPrincipal;
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestParam;
 
 import com.project.ABCDEproject.service.MatchingService;
 import com.project.ABCDEproject.service.MemberService;
 import com.project.ABCDEproject.service.ReviewService;
 import com.project.ABCDEproject.service.ScheduleService;
 import com.project.ABCDEproject.service.TeamService;
 import com.project.ABCDEproject.vo.MatchingRegion;
 import com.project.ABCDEproject.vo.MatchingTeam;
 import com.project.ABCDEproject.vo.ReviewRequest;
 import com.project.ABCDEproject.vo.Schedule;
+import com.project.ABCDEproject.vo.StadiumSchedule;
 import com.project.ABCDEproject.vo.Team;
 import com.project.ABCDEproject.vo.TeamMember;
 
 import lombok.extern.slf4j.Slf4j;
 
 @Controller
 @Slf4j
 @RequestMapping("matching")
 public class MatchingController {
 	
 	@Autowired
 	MemberService mb;
 	
 	@Autowired
 	MatchingService ms;
 	
 	@Autowired
 	ReviewService rs;
 	
 	@Autowired
 	TeamService ts;
 	
 	@Autowired
 	ScheduleService ss;
 	
 	
 	@GetMapping("requestMatching")
 	public String requestMatching(Model model, @AuthenticationPrincipal UserDetails user) {;
 		int userid=mb.getId(user.getUsername());
 		
 		ArrayList<Team> tl=ts.getTeamListFilterID(userid);
 		model.addAttribute("TeamList",tl);
 		
-		ArrayList<Schedule> sl=ss.getScheduleList();
+		ArrayList<StadiumSchedule> sl=ss.getScheduleList();
+		System.out.println(sl);
 		model.addAttribute("ScheduleList",sl);
 		return "matching/requestMatching";
 	}
 	
 	@PostMapping("requestMatching")
 	public String stackMatching(@AuthenticationPrincipal UserDetails user,
 			String teamSelect,
 			boolean shoesTF, int shoesCount,boolean vestTF, int vestCount,boolean ballTF, int ballCount, int schedule_id) {
 		
 		System.out.println(schedule_id);
 		
 		int userid=mb.getId(user.getUsername());
 		MatchingTeam mt=new MatchingTeam();
 		mt.setResolver_id(userid);
 		mt.setState(0);
 		mt.setTeam_id(Integer.parseInt(teamSelect));
 		mt.setSchedule_id(schedule_id);
 		System.out.println(mt.getTeam_id());
 		
 		ArrayList<Integer> id_list=new ArrayList<Integer>();
 		int leader_id=ts.getTeamLeader(mt.getTeam_id()).getLeader_id();
 		ArrayList<TeamMember> memberlist=ts.getTeamMemberList(mt.getTeam_id());
 		
 		id_list.add(leader_id);
 		for(TeamMember ob : memberlist) {
 			id_list.add(ob.getMember_id());
 		}
 		
 		ArrayList<Integer> avg_list=new ArrayList<Integer>();
 		
 		for(int id:id_list) {
 			avg_list.add(mb.getPoint(id));
 		}
 		
 
 		System.out.println(avg_list);
 		System.out.println(calculateAverage(avg_list));
 		mt.setAvg_point(calculateAverage(avg_list));
 				
 		
 		if(shoesTF)
 		{
 			mt.setShoes_count(shoesCount);
 		}
 		else
 		{
 			mt.setShoes_count(0);
 		}
 		
 		if(vestTF)
